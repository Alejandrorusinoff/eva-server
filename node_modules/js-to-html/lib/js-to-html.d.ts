export declare function setScriptIsVoid(is: boolean): void;
export type ArrayContent = (HtmlBase | string | HTMLElement | null)[];
export type Content = string | ArrayContent | null;
export type Attr4HTMLElement = {
    class?: string;
    id?: string;
    $on?: {
        click?: EventListener;
        blur?: EventListener;
    };
    $attrs?: {
        [key: string]: string;
    };
    accesskey?: any;
    autocapitalize?: any;
    contenteditable?: any;
    dir?: any;
    draggable?: any;
    hidden?: any;
    inputmode?: any;
    is?: any;
    itemid?: any;
    itemprop?: any;
    itemref?: any;
    itemscope?: any;
    itemtype?: any;
    lang?: any;
    nonce?: any;
    spellcheck?: any;
    style?: any;
    tabindex?: any;
    title?: any;
    translate?: any;
};
export interface Attr4HTMLAnchorElement extends Attr4HTMLElement {
    href?: any;
    target?: any;
    download?: any;
    ping?: any;
    rel?: any;
    hreflang?: any;
    type?: any;
    referrerpolicy?: any;
}
export interface Attr4HTMLAreaElement extends Attr4HTMLElement {
    alt?: any;
    coords?: any;
    shape?: any;
    href?: any;
    target?: any;
    download?: any;
    ping?: any;
    rel?: any;
    referrerpolicy?: any;
}
export interface Attr4HTMLAudioElement extends Attr4HTMLElement {
    src?: any;
    crossorigin?: any;
    preload?: any;
    autoplay?: any;
    loop?: any;
    muted?: any;
    controls?: any;
}
export interface Attr4HTMLBaseElement extends Attr4HTMLElement {
    href?: any;
    target?: any;
}
export interface Attr4HTMLQuoteElement extends Attr4HTMLElement {
    cite?: any;
}
export interface Attr4HTMLBodyElement extends Attr4HTMLElement {
    onafterprint?: any;
    onbeforeprint?: any;
    onbeforeunload?: any;
    onhashchange?: any;
    onlanguagechange?: any;
    onmessage?: any;
    onmessageerror?: any;
    onoffline?: any;
    ononline?: any;
    onpagehide?: any;
    onpageshow?: any;
    onpopstate?: any;
    onrejectionhandled?: any;
    onstorage?: any;
    onunhandledrejection?: any;
    onunload?: any;
}
export interface Attr4HTMLBRElement extends Attr4HTMLElement {
}
export interface Attr4HTMLButtonElement extends Attr4HTMLElement {
    autofocus?: any;
    disabled?: any;
    form?: any;
    formaction?: any;
    formenctype?: any;
    formmethod?: any;
    formnovalidate?: any;
    formtarget?: any;
    name?: any;
    type?: any;
    value?: any;
}
export interface Attr4HTMLCanvasElement extends Attr4HTMLElement {
    width?: any;
    height?: any;
}
export interface Attr4HTMLTableCaptionElement extends Attr4HTMLElement {
}
export interface Attr4HTMLTableColElement extends Attr4HTMLElement {
    span?: any;
}
export interface Attr4HTMLDataElement extends Attr4HTMLElement {
    value?: any;
}
export interface Attr4HTMLDataListElement extends Attr4HTMLElement {
}
export interface Attr4HTMLModElement extends Attr4HTMLElement {
    cite?: any;
    datetime?: any;
}
export interface Attr4HTMLDetailsElement extends Attr4HTMLElement {
    open?: any;
}
export interface Attr4HTMLDialogElement extends Attr4HTMLElement {
    open?: any;
}
export interface Attr4HTMLDivElement extends Attr4HTMLElement {
}
export interface Attr4HTMLDListElement extends Attr4HTMLElement {
}
export interface Attr4HTMLEmbedElement extends Attr4HTMLElement {
    src?: any;
    type?: any;
    width?: any;
    height?: any;
    any?: any;
}
export interface Attr4HTMLFieldSetElement extends Attr4HTMLElement {
    disabled?: any;
    form?: any;
    name?: any;
}
export interface Attr4HTMLFormElement extends Attr4HTMLElement {
    "accept-charset"?: any;
    action?: any;
    autocomplete?: any;
    enctype?: any;
    method?: any;
    name?: any;
    novalidate?: any;
    target?: any;
}
export interface Attr4HTMLHeadingElement extends Attr4HTMLElement {
}
export interface Attr4HTMLHeadElement extends Attr4HTMLElement {
}
export interface Attr4HTMLHRElement extends Attr4HTMLElement {
}
export interface Attr4HTMLHtmlElement extends Attr4HTMLElement {
    manifest?: any;
}
export interface Attr4HTMLIFrameElement extends Attr4HTMLElement {
    src?: any;
    srcdoc?: any;
    name?: any;
    sandbox?: any;
    allowfullscreen?: any;
    allowpaymentrequest?: any;
    allowusermedia?: any;
    width?: any;
    height?: any;
    referrerpolicy?: any;
}
export interface Attr4HTMLImageElement extends Attr4HTMLElement {
    alt?: any;
    src?: any;
    srcset?: any;
    crossorigin?: any;
    usemap?: any;
    ismap?: any;
    width?: any;
    height?: any;
    decoding?: any;
    referrerpolicy?: any;
}
export interface Attr4HTMLInputElement extends Attr4HTMLElement {
    accept?: any;
    alt?: any;
    autocomplete?: any;
    autofocus?: any;
    checked?: any;
    dirname?: any;
    disabled?: any;
    form?: any;
    formaction?: any;
    formenctype?: any;
    formmethod?: any;
    formnovalidate?: any;
    formtarget?: any;
    height?: any;
    list?: any;
    max?: any;
    maxlength?: any;
    min?: any;
    minlength?: any;
    multiple?: any;
    name?: any;
    pattern?: any;
    placeholder?: any;
    readonly?: any;
    required?: any;
    size?: any;
    src?: any;
    step?: any;
    type?: any;
    value?: any;
    width?: any;
}
export interface Attr4HTMLLabelElement extends Attr4HTMLElement {
    for?: any;
}
export interface Attr4HTMLLegendElement extends Attr4HTMLElement {
}
export interface Attr4HTMLLIElement extends Attr4HTMLElement {
    value?: any;
}
export interface Attr4HTMLLinkElement extends Attr4HTMLElement {
    href?: any;
    crossorigin?: any;
    rel?: any;
    as?: any;
    media?: any;
    hreflang?: any;
    type?: any;
    sizes?: any;
    referrerpolicy?: any;
    integrity?: any;
}
export interface Attr4HTMLMapElement extends Attr4HTMLElement {
    name?: any;
}
export interface Attr4Element extends Attr4HTMLElement {
    "per [MATHML]"?: any;
}
export interface Attr4HTMLMenuElement extends Attr4HTMLElement {
}
export interface Attr4HTMLMetaElement extends Attr4HTMLElement {
    name?: any;
    "http-equiv"?: any;
    content?: any;
    charset?: any;
}
export interface Attr4HTMLMeterElement extends Attr4HTMLElement {
    value?: any;
    min?: any;
    max?: any;
    low?: any;
    high?: any;
    optimum?: any;
}
export interface Attr4HTMLObjectElement extends Attr4HTMLElement {
    data?: any;
    type?: any;
    typemustmatch?: any;
    name?: any;
    usemap?: any;
    form?: any;
    width?: any;
    height?: any;
}
export interface Attr4HTMLOListElement extends Attr4HTMLElement {
    reversed?: any;
    start?: any;
    type?: any;
}
export interface Attr4HTMLOptGroupElement extends Attr4HTMLElement {
    disabled?: any;
    label?: any;
}
export interface Attr4HTMLOptionElement extends Attr4HTMLElement {
    disabled?: any;
    label?: any;
    selected?: any;
    value?: any;
}
export interface Attr4HTMLOutputElement extends Attr4HTMLElement {
    for?: any;
    form?: any;
    name?: any;
}
export interface Attr4HTMLParagraphElement extends Attr4HTMLElement {
}
export interface Attr4HTMLParamElement extends Attr4HTMLElement {
    name?: any;
    value?: any;
}
export interface Attr4HTMLPictureElement extends Attr4HTMLElement {
}
export interface Attr4HTMLPreElement extends Attr4HTMLElement {
}
export interface Attr4HTMLProgressElement extends Attr4HTMLElement {
    value?: any;
    max?: any;
}
export interface Attr4HTMLScriptElement extends Attr4HTMLElement {
    src?: any;
    type?: any;
    async?: any;
    defer?: any;
    crossorigin?: any;
    integrity?: any;
}
export interface Attr4HTMLSelectElement extends Attr4HTMLElement {
    autocomplete?: any;
    autofocus?: any;
    disabled?: any;
    form?: any;
    multiple?: any;
    name?: any;
    required?: any;
    size?: any;
}
export interface Attr4HTMLSlotElement extends Attr4HTMLElement {
    name?: any;
}
export interface Attr4HTMLSourceElement extends Attr4HTMLElement {
    src?: any;
    "type srcset"?: any;
    sizes?: any;
    media?: any;
}
export interface Attr4HTMLSpanElement extends Attr4HTMLElement {
}
export interface Attr4HTMLStyleElement extends Attr4HTMLElement {
    media?: any;
}
export interface Attr4SVGSVGElement extends Attr4HTMLElement {
    focusable?: any;
    viewbox?: any;
    "aria-hidden"?: any;
}
export interface Attr4HTMLTableElement extends Attr4HTMLElement {
}
export interface Attr4HTMLTableSectionElement extends Attr4HTMLElement {
}
export interface Attr4HTMLTableCellElement extends Attr4HTMLElement {
    colspan?: any;
    rowspan?: any;
    headers?: any;
}
export interface Attr4HTMLTemplateElement extends Attr4HTMLElement {
}
export interface Attr4HTMLTextAreaElement extends Attr4HTMLElement {
    autofocus?: any;
    cols?: any;
    dirname?: any;
    disabled?: any;
    form?: any;
    maxlength?: any;
    minlength?: any;
    name?: any;
    placeholder?: any;
    readonly?: any;
    required?: any;
    rows?: any;
    wrap?: any;
}
export interface Attr4HTMLTimeElement extends Attr4HTMLElement {
    datetime?: any;
}
export interface Attr4HTMLTitleElement extends Attr4HTMLElement {
}
export interface Attr4HTMLTableRowElement extends Attr4HTMLElement {
}
export interface Attr4HTMLTrackElement extends Attr4HTMLElement {
    default?: any;
    kind?: any;
    label?: any;
    src?: any;
    srclang?: any;
}
export interface Attr4HTMLUListElement extends Attr4HTMLElement {
}
export interface Attr4HTMLVideoElement extends Attr4HTMLElement {
    src?: any;
    crossorigin?: any;
    poster?: any;
    preload?: any;
    autoplay?: any;
    playsinline?: any;
    loop?: any;
    muted?: any;
    controls?: any;
    width?: any;
    height?: any;
}
export interface Attr4SVGCircleElement extends Attr4HTMLElement {
    cx?: any;
    cy?: any;
    r?: any;
}
export interface Attr4SVGPathElement extends Attr4HTMLElement {
    d?: any;
}
export declare var html: {
    defaultTitle: string;
    insecureModeEnabled: boolean;
    mandatoryTitle: boolean;
    optimizingArrange: boolean;
    auditArrange: (what: string, setting: boolean) => void;
    _text(text: string): HtmlBase;
    _comment(text: string): HtmlBase;
    includeHtml(htmlCode: string): HtmlBase;
    includeHtmlValidator(htmlText: string): boolean;
    a(optsOrContent?: Attr4HTMLAnchorElement | Content, content?: Content): HtmlTag<HTMLAnchorElement>;
    abbr(optsOrContent?: Attr4HTMLElement | Content, content?: Content): HtmlTag<HTMLElement>;
    address(optsOrContent?: Attr4HTMLElement | Content, content?: Content): HtmlTag<HTMLElement>;
    area(opts?: Attr4HTMLAreaElement | Content): HtmlTag<HTMLAreaElement>;
    article(optsOrContent?: Attr4HTMLElement | Content, content?: Content): HtmlTag<HTMLElement>;
    aside(optsOrContent?: Attr4HTMLElement | Content, content?: Content): HtmlTag<HTMLElement>;
    audio(optsOrContent?: Attr4HTMLAudioElement | Content, content?: Content): HtmlTag<HTMLAudioElement>;
    b(optsOrContent?: Attr4HTMLElement | Content, content?: Content): HtmlTag<HTMLElement>;
    base(opts?: Attr4HTMLBaseElement | Content): HtmlTag<HTMLBaseElement>;
    bdi(optsOrContent?: Attr4HTMLElement | Content, content?: Content): HtmlTag<HTMLElement>;
    bdo(optsOrContent?: Attr4HTMLElement | Content, content?: Content): HtmlTag<HTMLElement>;
    blockquote(optsOrContent?: Attr4HTMLQuoteElement | Content, content?: Content): HtmlTag<HTMLQuoteElement>;
    body(optsOrContent?: Attr4HTMLBodyElement | Content, content?: Content): HtmlTag<HTMLBodyElement>;
    br(opts?: Attr4HTMLBRElement | Content): HtmlTag<HTMLBRElement>;
    button(optsOrContent?: Attr4HTMLButtonElement | Content, content?: Content): HtmlTag<HTMLButtonElement>;
    canvas(optsOrContent?: Attr4HTMLCanvasElement | Content, content?: Content): HtmlTag<HTMLCanvasElement>;
    caption(optsOrContent?: Attr4HTMLTableCaptionElement | Content, content?: Content): HtmlTag<HTMLTableCaptionElement>;
    cite(optsOrContent?: Attr4HTMLElement | Content, content?: Content): HtmlTag<HTMLElement>;
    code(optsOrContent?: Attr4HTMLElement | Content, content?: Content): HtmlTag<HTMLElement>;
    col(opts?: Attr4HTMLTableColElement | Content): HtmlTag<HTMLTableColElement>;
    colgroup(optsOrContent?: Attr4HTMLTableColElement | Content, content?: Content): HtmlTag<HTMLTableColElement>;
    data(optsOrContent?: Attr4HTMLDataElement | Content, content?: Content): HtmlTag<HTMLDataElement>;
    datalist(optsOrContent?: Attr4HTMLDataListElement | Content, content?: Content): HtmlTag<HTMLDataListElement>;
    dd(optsOrContent?: Attr4HTMLElement | Content, content?: Content): HtmlTag<HTMLElement>;
    del(optsOrContent?: Attr4HTMLModElement | Content, content?: Content): HtmlTag<HTMLModElement>;
    details(optsOrContent?: Attr4HTMLDetailsElement | Content, content?: Content): HtmlTag<HTMLDetailsElement>;
    dfn(optsOrContent?: Attr4HTMLElement | Content, content?: Content): HtmlTag<HTMLElement>;
    dialog(optsOrContent?: Attr4HTMLDialogElement | Content, content?: Content): HtmlTag<HTMLDialogElement>;
    div(optsOrContent?: Attr4HTMLDivElement | Content, content?: Content): HtmlTag<HTMLDivElement>;
    dl(optsOrContent?: Attr4HTMLDListElement | Content, content?: Content): HtmlTag<HTMLDListElement>;
    dt(optsOrContent?: Attr4HTMLElement | Content, content?: Content): HtmlTag<HTMLElement>;
    em(optsOrContent?: Attr4HTMLElement | Content, content?: Content): HtmlTag<HTMLElement>;
    embed(opts?: Attr4HTMLEmbedElement | Content): HtmlTag<HTMLEmbedElement>;
    fieldset(optsOrContent?: Attr4HTMLFieldSetElement | Content, content?: Content): HtmlTag<HTMLFieldSetElement>;
    figcaption(optsOrContent?: Attr4HTMLElement | Content, content?: Content): HtmlTag<HTMLElement>;
    figure(optsOrContent?: Attr4HTMLElement | Content, content?: Content): HtmlTag<HTMLElement>;
    footer(optsOrContent?: Attr4HTMLElement | Content, content?: Content): HtmlTag<HTMLElement>;
    form(optsOrContent?: Attr4HTMLFormElement | Content, content?: Content): HtmlTag<HTMLFormElement>;
    h1(optsOrContent?: Attr4HTMLHeadingElement | Content, content?: Content): HtmlTag<HTMLHeadingElement>;
    h2(optsOrContent?: Attr4HTMLHeadingElement | Content, content?: Content): HtmlTag<HTMLHeadingElement>;
    h3(optsOrContent?: Attr4HTMLHeadingElement | Content, content?: Content): HtmlTag<HTMLHeadingElement>;
    h4(optsOrContent?: Attr4HTMLHeadingElement | Content, content?: Content): HtmlTag<HTMLHeadingElement>;
    h5(optsOrContent?: Attr4HTMLHeadingElement | Content, content?: Content): HtmlTag<HTMLHeadingElement>;
    h6(optsOrContent?: Attr4HTMLHeadingElement | Content, content?: Content): HtmlTag<HTMLHeadingElement>;
    head(optsOrContent?: Attr4HTMLHeadElement | Content, content?: Content): HtmlTag<HTMLHeadElement>;
    header(optsOrContent?: Attr4HTMLElement | Content, content?: Content): HtmlTag<HTMLElement>;
    hgroup(optsOrContent?: Attr4HTMLElement | Content, content?: Content): HtmlTag<HTMLElement>;
    hr(opts?: Attr4HTMLHRElement | Content): HtmlTag<HTMLHRElement>;
    html(optsOrContent?: Attr4HTMLHtmlElement | Content, content?: Content): HtmlTag<HTMLHtmlElement>;
    i(optsOrContent?: Attr4HTMLElement | Content, content?: Content): HtmlTag<HTMLElement>;
    iframe(opts?: Attr4HTMLIFrameElement | Content): HtmlTag<HTMLIFrameElement>;
    img(opts?: Attr4HTMLImageElement | Content): HtmlTag<HTMLImageElement>;
    input(opts?: Attr4HTMLInputElement | Content): HtmlTag<HTMLInputElement>;
    ins(optsOrContent?: Attr4HTMLModElement | Content, content?: Content): HtmlTag<HTMLModElement>;
    kbd(optsOrContent?: Attr4HTMLElement | Content, content?: Content): HtmlTag<HTMLElement>;
    label(optsOrContent?: Attr4HTMLLabelElement | Content, content?: Content): HtmlTag<HTMLLabelElement>;
    legend(optsOrContent?: Attr4HTMLLegendElement | Content, content?: Content): HtmlTag<HTMLLegendElement>;
    li(optsOrContent?: Attr4HTMLLIElement | Content, content?: Content): HtmlTag<HTMLLIElement>;
    link(opts?: Attr4HTMLLinkElement | Content): HtmlTag<HTMLLinkElement>;
    main(optsOrContent?: Attr4HTMLElement | Content, content?: Content): HtmlTag<HTMLElement>;
    map(optsOrContent?: Attr4HTMLMapElement | Content, content?: Content): HtmlTag<HTMLMapElement>;
    mark(optsOrContent?: Attr4HTMLElement | Content, content?: Content): HtmlTag<HTMLElement>;
    math(optsOrContent?: Attr4Element | Content, content?: Content): HtmlTag<HTMLElement>;
    menu(optsOrContent?: Attr4HTMLMenuElement | Content, content?: Content): HtmlTag<HTMLMenuElement>;
    meta(opts?: Attr4HTMLMetaElement | Content): HtmlTag<HTMLMetaElement>;
    meter(optsOrContent?: Attr4HTMLMeterElement | Content, content?: Content): HtmlTag<HTMLMeterElement>;
    nav(optsOrContent?: Attr4HTMLElement | Content, content?: Content): HtmlTag<HTMLElement>;
    noscript(optsOrContent?: Attr4HTMLElement | Content, content?: Content): HtmlTag<HTMLElement>;
    object(optsOrContent?: Attr4HTMLObjectElement | Content, content?: Content): HtmlTag<HTMLObjectElement>;
    ol(optsOrContent?: Attr4HTMLOListElement | Content, content?: Content): HtmlTag<HTMLOListElement>;
    optgroup(optsOrContent?: Attr4HTMLOptGroupElement | Content, content?: Content): HtmlTag<HTMLOptGroupElement>;
    option(optsOrContent?: Attr4HTMLOptionElement | Content, content?: Content): HtmlTag<HTMLOptionElement>;
    output(optsOrContent?: Attr4HTMLOutputElement | Content, content?: Content): HtmlTag<HTMLOutputElement>;
    p(optsOrContent?: Attr4HTMLParagraphElement | Content, content?: Content): HtmlTag<HTMLParagraphElement>;
    param(opts?: Attr4HTMLParamElement | Content): HtmlTag<HTMLParamElement>;
    picture(optsOrContent?: Attr4HTMLPictureElement | Content, content?: Content): HtmlTag<HTMLPictureElement>;
    pre(optsOrContent?: Attr4HTMLPreElement | Content, content?: Content): HtmlTag<HTMLPreElement>;
    progress(optsOrContent?: Attr4HTMLProgressElement | Content, content?: Content): HtmlTag<HTMLProgressElement>;
    q(optsOrContent?: Attr4HTMLQuoteElement | Content, content?: Content): HtmlTag<HTMLQuoteElement>;
    rp(optsOrContent?: Attr4HTMLElement | Content, content?: Content): HtmlTag<HTMLElement>;
    rt(optsOrContent?: Attr4HTMLElement | Content, content?: Content): HtmlTag<HTMLElement>;
    ruby(optsOrContent?: Attr4HTMLElement | Content, content?: Content): HtmlTag<HTMLElement>;
    s(optsOrContent?: Attr4HTMLElement | Content, content?: Content): HtmlTag<HTMLElement>;
    samp(optsOrContent?: Attr4HTMLElement | Content, content?: Content): HtmlTag<HTMLElement>;
    script(optsOrContent?: Attr4HTMLScriptElement): HtmlTag<HTMLScriptElement>;
    section(optsOrContent?: Attr4HTMLElement | Content, content?: Content): HtmlTag<HTMLElement>;
    select(optsOrContent?: Attr4HTMLSelectElement | Content, content?: Content): HtmlTag<HTMLSelectElement>;
    slot(optsOrContent?: Attr4HTMLSlotElement | Content, content?: Content): HtmlTag<HTMLSlotElement>;
    small(optsOrContent?: Attr4HTMLElement | Content, content?: Content): HtmlTag<HTMLElement>;
    source(opts?: Attr4HTMLSourceElement | Content): HtmlTag<HTMLSourceElement>;
    span(optsOrContent?: Attr4HTMLSpanElement | Content, content?: Content): HtmlTag<HTMLSpanElement>;
    strong(optsOrContent?: Attr4HTMLElement | Content, content?: Content): HtmlTag<HTMLElement>;
    style(optsOrContent?: Attr4HTMLStyleElement | Content, content?: Content): HtmlTag<HTMLStyleElement>;
    sub(optsOrContent?: Attr4HTMLElement | Content, content?: Content): HtmlTag<HTMLElement>;
    summary(optsOrContent?: Attr4HTMLElement | Content, content?: Content): HtmlTag<HTMLElement>;
    sup(optsOrContent?: Attr4HTMLElement | Content, content?: Content): HtmlTag<HTMLElement>;
    svg(optsOrContent?: Attr4SVGSVGElement | Content, content?: Content): HtmlTag<SVGSVGElement>;
    table(optsOrContent?: Attr4HTMLTableElement | Content, content?: Content): HtmlTag<HTMLTableElement>;
    tbody(optsOrContent?: Attr4HTMLTableSectionElement | Content, content?: Content): HtmlTag<HTMLTableSectionElement>;
    td(optsOrContent?: Attr4HTMLTableCellElement | Content, content?: Content): HtmlTag<HTMLTableCellElement>;
    template(opts?: Attr4HTMLTemplateElement | Content): HtmlTag<HTMLTemplateElement>;
    textarea(optsOrContent?: Attr4HTMLTextAreaElement | Content, content?: Content): HtmlTag<HTMLTextAreaElement>;
    tfoot(optsOrContent?: Attr4HTMLTableSectionElement | Content, content?: Content): HtmlTag<HTMLTableSectionElement>;
    th(optsOrContent?: Attr4HTMLTableCellElement | Content, content?: Content): HtmlTag<HTMLTableCellElement>;
    thead(optsOrContent?: Attr4HTMLTableSectionElement | Content, content?: Content): HtmlTag<HTMLTableSectionElement>;
    time(optsOrContent?: Attr4HTMLTimeElement | Content, content?: Content): HtmlTag<HTMLTimeElement>;
    title(optsOrContent?: Attr4HTMLTitleElement | Content, content?: Content): HtmlTag<HTMLTitleElement>;
    tr(optsOrContent?: Attr4HTMLTableRowElement | Content, content?: Content): HtmlTag<HTMLTableRowElement>;
    track(opts?: Attr4HTMLTrackElement | Content): HtmlTag<HTMLTrackElement>;
    u(optsOrContent?: Attr4HTMLElement | Content, content?: Content): HtmlTag<HTMLElement>;
    ul(optsOrContent?: Attr4HTMLUListElement | Content, content?: Content): HtmlTag<HTMLUListElement>;
    var(optsOrContent?: Attr4HTMLElement | Content, content?: Content): HtmlTag<HTMLElement>;
    video(optsOrContent?: Attr4HTMLVideoElement | Content, content?: Content): HtmlTag<HTMLVideoElement>;
    wbr(opts?: Attr4HTMLElement | Content): HtmlTag<HTMLElement>;
    circle(opts?: Attr4SVGCircleElement | Content): HtmlTag<SVGCircleElement>;
    path(opts?: Attr4SVGPathElement | Content): HtmlTag<SVGPathElement>;
};
export type Checker = {
    check: (value: any, directObject: DirectObject) => boolean;
    text?: string;
};
export type ValidPropertiesChecker = {
    checks: Checker[];
    transform?: (x: any) => any;
};
export type ValidPropertydProperty = {
    textNode?: ValidPropertiesChecker;
    tagName?: ValidPropertiesChecker;
    attributes?: ValidPropertiesChecker;
    content?: ValidPropertiesChecker;
    htmlCode?: ValidPropertiesChecker;
    validator?: ValidPropertiesChecker;
    commentText?: ValidPropertiesChecker;
    readonly [key: string]: ValidPropertiesChecker;
};
export type DirectObject = {
    textNode?: string;
    tagName?: string;
    attributes?: object;
    content?: HtmlBase[];
    htmlCode?: string;
    validator?: (content: any) => boolean;
    commentText?: string;
    readonly [key: string]: any;
};
export type PrintOpts = {
    pretty?: boolean;
    incomplete?: boolean;
    title?: string;
};
export type PrintRecurseOpts = {
    margin?: number;
};
export declare class HtmlBase {
    readonly [key: string]: any;
    constructor(directObject: DirectObject, validProperties?: ValidPropertydProperty);
    private pattNonWordChar;
    attributesMapToHtmlText(attributeMap: any, inner?: true): string;
    attributesToHtmlText(): string;
    toHtmlText(opts: PrintOpts, recurseOpts: PrintRecurseOpts): string;
    createNode(): HTMLElement | Text | SVGElement;
    create(): HTMLElement | Text | SVGElement;
}
export declare function arrayToHtmlText(listOfObjects: (string | HtmlBase)[], opts: PrintOpts, recurseOpts: PrintRecurseOpts): string;
export declare class Html extends HtmlBase {
    tagName: string;
    attributes: {
        [key: string]: any;
    };
    content: HtmlBase[];
    constructor(directObject: DirectObject);
    toHtmlText(opts?: PrintOpts, recurseOpts?: PrintRecurseOpts): string;
    contentToHtmlText(opts: PrintOpts, recurseOpts: PrintRecurseOpts): string;
    createNode(): HTMLElement | SVGElement;
    create(): HTMLElement | SVGElement;
    setOrResetAttribute(element: HTMLElement | SVGElement, attr: string, valueOrNull: null | string, testFirst: boolean): void;
    assignAttr(element: HTMLElement | SVGElement, attributesMap: any, testFirst: boolean): void;
    toHtmlDoc(opts: PrintOpts, recurseOpts: PrintRecurseOpts): string;
}
export interface HtmlTag<T extends HTMLElement | SVGElement> extends Html {
    create(): T;
}
export declare class HtmlTextNode extends HtmlBase {
    textNode: string;
    constructor(directObject: DirectObject);
    toHtmlText(opts: PrintOpts, recurseOpts: PrintRecurseOpts): string;
    createNode(): Text;
    create(): Text;
}
export declare class HtmlDirectNode extends HtmlBase {
    htmlCode: string;
    constructor(directObject: DirectObject);
    toHtmlText(opts: PrintOpts, recurseOpts: PrintRecurseOpts): string;
}
export declare class HtmlComment extends HtmlBase {
    commentText: string;
    constructor(directObject: DirectObject);
    toHtmlText(opts: PrintOpts, recurseOpts: PrintRecurseOpts): string;
}
export declare function arrange(element: HTMLElement | SVGElement, oneObject: HtmlBase): void;
export declare function arrange(element: HTMLElement | SVGElement, listOfObjects: HtmlBase[]): void;
export declare function direct(directObject: DirectObject): HtmlBase;
export type HtmlTagDef = {
    type: string;
    void?: boolean;
    display?: string;
    description: string;
    mandatoryTag?: string;
};
export type HtmlTags = {
    readonly [key: string]: HtmlTagDef;
};
export declare let htmlTags: HtmlTags;
export type HtmlAttributes = {
    [key: string]: {
        tags: {
            [key: string]: {
                description: string;
                value: string;
            };
        };
        idl: string;
        listName?: string;
        rejectSpaces?: boolean;
        reserved?: boolean;
        noProperty?: boolean;
    };
};
export declare let htmlAttributes: HtmlAttributes;
